/**
 * Mule BrightIdea Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.brightidea;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.api.representation.Form;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import java.io.IOException;
import java.net.URI;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "brightidea")
public class BrightIdeaConnector {

    /**
     * The host to connect to, i.e. na5.brightidea.com
     */
    @Configurable
    private String host;

    /**
     * The API key given by BrightIdea for your application
     */
    @Configurable
    private String apiKey;

    /**
     * Adds logging for the underlying Jersey client
     */
    @Configurable
    @Optional
    @Default("false")
    private boolean addLoggingFilter;

    private Client client;

    @Start
    public void initializeClient() {
        client = new Client();
        if (addLoggingFilter) {
            client.addFilter(new LoggingFilter());
        }
    }

    /**
     * Returns all data for this BI API Key.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getApiData}
     *
     * @return data for this BI API Key.
     */
    @Processor
    public String getApiData() throws IOException {
        return executeRequest("bi.api.get", String.class);
    }

    /**
     * Returns a list of existing affiliates accessible with your BI API Key.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getAffiliateList}
     *
     * @return Some string
     */
    @Processor
    public String getAffiliateList() throws IOException {
        return executeRequest("bi.api.getAffiliateList", String.class);
    }

    /**
     * Returns a list of API calls made from your BI API account.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getApiCallList}
     *
     * @param query An SQL style query which accepts the WHERE, ORDER BY and LIMIT syntax. (WHERE date > '11/23/09' ORDER BY date DESC LIMIT 5, 10). Passing COUNT will return the total row count for this table instead of the data.
     * @return Some string
     */
    @Processor
    public String getApiCallList(@Optional String query) throws IOException {
        Map<String, String> queryParams = new HashMap<String, String>(1);
        if (query != null) {
            queryParams.put("q", query);
        }
        return executeRequest("bi.api.getAPICallList", queryParams, String.class);
    }

    /**
     * Returns a list of permissions available to your BI API account.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getPermissionList}
     *
     * @return Some string
     */
    @Processor
    public String getPermissionList() throws IOException {
        return executeRequest("bi.api.getPermissionList", String.class);
    }

    /**
     * Gets a list of existing ideas under a given affiliate.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getIdeaListForAffiliate}
     *
     * @param affiliate This is the ID (i.e. OD111) of the affiliate.
     * @param query     An SQL style query which accepts the WHERE, ORDER BY and LIMIT syntax. (WHERE date > '11/23/09' ORDER BY date DESC LIMIT 5, 10). Passing COUNT will return the total row count for this table instead of the data.
     * @return Some string
     */
    @Processor
    public Ideas getIdeaListForAffiliate(String affiliate, @Optional String query) throws IOException {
        Map<String, String> queryParams = new HashMap<String, String>(2);
        queryParams.put("a", affiliate);
        if (query != null) {
            queryParams.put("q", query);
        }
        return executeRequest("bi.affiliate.getIdeaList", queryParams, Ideas.class);
    }

    /**
     * Gets a list of existing ideas submitted by a given member.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:getIdeaListForMember}
     *
     * @param memeberId This is the ID (i.e. 11111111-1111-1111-1111-111111111111) of the member.
     * @param query     An SQL style query which accepts the WHERE, ORDER BY and LIMIT syntax. (WHERE date > '11/23/09' ORDER BY date DESC LIMIT 5, 10). Passing COUNT will return the total row count for this table instead of the data.
     * @return Some string
     */
    @Processor
    public Ideas getIdeaListForMember(String memeberId, @Optional String query) throws IOException {
        Map<String, String> queryParams = new HashMap<String, String>(2);
        queryParams.put("m", memeberId);
        if (query != null) {
            queryParams.put("q", query);
        }
        return executeRequest("bi.affiliate.member.getIdeaList", queryParams, Ideas.class);
    }

    /**
     * Creates a new Idea.
     * <p/>
     * {@sample.xml ../../../doc/BrightIdeaConnector-connector.xml.sample brightidea:createIdea}
     *
     * @param campaignId the campaign id to use
     * @param memeberId  the member id for which to create the idea
     * @param categoryId the category id of the idea
     * @param title      the title of the idea
     * @param body       the body of the idea
     * @return the created {@link Idea}
     */
    @Processor
    public Idea createIdea(String campaignId, String memeberId, String categoryId, String title, String body) {
        String function = "bi.affiliate.campaign.idea.create";
        URI uri = UriBuilder.fromUri("https://" + host + "/BIP/API/api.bix").build();
        WebResource.Builder resource = client.resource(uri).
                header("API_FUNCTION", function).
                header("API_KEY", apiKey);
        Form form = new Form();
        form.add("campaign_id", campaignId);
        form.add("member_id", memeberId);
        form.add("category_id", categoryId);
        form.add("title", title);
        form.add("body", body);

        return resource.type(MediaType.APPLICATION_FORM_URLENCODED).post(Idea.class, form);
    }

    private <T> T executeRequest(String apiFunction, Map<String, String> queryParameters, Class<T> responseClass) throws IOException {
        URI uri = UriBuilder.fromUri("https://" + host + "/BIP/API/api.bix").build();
        WebResource r = client.resource(uri);
        for (Map.Entry<String, String> queryParameter : queryParameters.entrySet()) {
            if (queryParameter.getValue() != null) {
                r = r.queryParam(queryParameter.getKey(), queryParameter.getValue());
            }
        }
        ClientResponse clientResponse = r.header("API_FUNCTION", apiFunction).header("API_KEY", apiKey).get(ClientResponse.class);
        return clientResponse.getEntity(responseClass);
    }

    private <T> T executeRequest(String apiFunction, Class<T> responseClass) throws IOException {
        return executeRequest(apiFunction, Collections.<String, String>emptyMap(), responseClass);
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public boolean isAddLoggingFilter() {
        return addLoggingFilter;
    }

    public void setAddLoggingFilter(boolean addLoggingFilter) {
        this.addLoggingFilter = addLoggingFilter;
    }
}